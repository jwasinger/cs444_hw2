package main

import (
	"fmt"
	//"time"
	"sync"
	"runtime"
)

//loop forever simply printing the thread (philosopher) name
func threadMain(wg *sync.WaitGroup, forks [5]sync.Mutex, position int, names [5]string) {
	defer wg.Done()
	for ;; {
		fmt.Println(names[position], ": Hello!")
		//time.Sleep(20) // yield to other threads
	}
}

func main() {
	var wg sync.WaitGroup

	runtime.GOMAXPROCS(2) // max number of CPUs used

	names := [5]string{"1","2","3","4","5"}
	forks := [5]sync.Mutex{}
	wg.Add(5)

	for i := 0; i < 5; i++ {
		go threadMain(&wg, forks, i, names) // create a new goroutine (thread)
	}

	wg.Wait()
	fmt.Println("DONE")
}
